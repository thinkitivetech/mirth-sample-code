<channel version="3.9.1">
  <id>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</id>
  <nextMetaDataId>3</nextMetaDataId>
  <name>AthenaHealth - Token Manager</name>
  <description></description>
  <revision>1</revision>
  <sourceConnector version="3.9.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="3.9.1">
      <pluginProperties/>
      <pollConnectorProperties version="3.9.1">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>2700000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.9.1">
        <responseVariable>d1</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>10</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <script>return true;</script>
    </properties>
    <transformer version="3.9.1">
      <elements/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.9.1">
      <elements/>
    </filter>
    <transportName>JavaScript Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.9.1">
      <metaDataId>1</metaDataId>
      <name>Get access token</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>true</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>${athena-api-url}/${athena-oauth-variant}/token</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map">
          <entry>
            <string>grant_type</string>
            <list>
              <string>client_credentials</string>
            </list>
          </entry>
          <entry>
            <string>scope</string>
            <list>
              <string>athena/service/Athenanet.MDP.*</string>
            </list>
          </entry>
        </parameters>
        <useHeadersVariable>false</useHeadersVariable>
        <headersVariable></headersVariable>
        <useParametersVariable>false</useParametersVariable>
        <parametersVariable></parametersVariable>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${athena-client-id}</username>
        <password>${athena-client-secret}</password>
        <content></content>
        <contentType>application/x-www-form-urlencoded</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>10000</socketTimeout>
      </properties>
      <transformer version="3.9.1">
        <elements>
          <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
            <name>apiId</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <variable>apiId</variable>
            <mapping></mapping>
            <defaultValue></defaultValue>
            <replacements/>
            <scope>GLOBAL</scope>
          </com.mirth.connect.plugins.mapper.MapperStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>var data = JSON.parse(response.getMessage());
globalMap.put(&apos;athena-access-token&apos;, data.access_token);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.9.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>PRODUCTION</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns/>
    <attachmentProperties version="3.9.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1623702841103</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <pruningSettings>
        <pruneMetaDataDays>1</pruneMetaDataDays>
        <archiveEnabled>false</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.9.1">
        <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
        <name>Channel Helpers</name>
        <revision>1</revision>
        <lastModified>
          <time>1636720334943</time>
          <timezone>Asia/Kolkata</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
          <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
          <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
          <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
          <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
          <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
          <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
          <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
          <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
          <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
          <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
          <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
          <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
          <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
          <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
          <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
          <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
          <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
          <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
          <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
          <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
          <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
          <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
          <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
          <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
          <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
          <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
          <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
          <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
          <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
          <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
          <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
          <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
          <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
          <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
          <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
          <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
          <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
          <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
          <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
          <string>ae961745-fe19-46bd-b240-c82888091366</string>
          <string>68581957-7fba-421f-b063-941a804fcc46</string>
          <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
          <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
          <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
          <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
          <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
          <string>982b29a5-1743-4435-8842-9810e4e34926</string>
          <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
          <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
          <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
          <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
          <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
          <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
          <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
          <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
          <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
          <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
          <string>72471096-425b-4750-81a4-123fca2e302c</string>
          <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
          <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
          <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
          <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
          <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
          <string>455c536f-d3fb-4832-941e-ef230b683590</string>
          <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
          <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
          <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
          <string>a6825055-e697-487f-9add-560ad9567a60</string>
          <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
          <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
          <string>bd270438-7262-47f8-8656-1baf51287078</string>
          <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
          <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
          <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
          <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
          <string>13738349-4cc4-43de-9365-a27ead17b524</string>
          <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
          <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
          <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
          <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
          <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
          <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
          <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
          <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
          <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
          <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
          <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
          <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
          <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
          <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
          <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
          <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
          <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
          <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
          <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.9.1">
            <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
            <name>Convert CSV to JSON</name>
            <revision>1</revision>
            <lastModified>
              <time>1636720335071</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.1">
            <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
            <name>Generic - Send message to channel destination</name>
            <revision>1</revision>
            <lastModified>
              <time>1636720335173</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.1">
            <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
            <name>Get bots DB connection to specified environment</name>
            <revision>1</revision>
            <lastModified>
              <time>1636720335017</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.1">
            <id>554bd282-172b-43a0-8902-992baf63b04d</id>
            <name>Get DB connection to specified environment</name>
            <revision>1</revision>
            <lastModified>
              <time>1636720335113</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.1">
            <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
            <name>Postprocessor - Generate channel response</name>
            <revision>1</revision>
            <lastModified>
              <time>1636720334961</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>